# docker-compose.yaml
x-airflow-common:
  &airflow-common
  build:
    context: ./airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: mysql+mysqlconnector://admin:admingrupo5@mysql_airflow/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: mysql+mysqlconnector://admin:admingrupo5@mysql_airflow/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+mysql://admin:admingrupo5@mysql_airflow/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__WEBSERVER__SECRET_KEY: 'supersecreto123'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    MLFLOW_TRACKING_URI: http://10.43.101.195:5000
    DATABASE_URL: mysql+pymysql://admin:admingrupo5@10.43.101.195:3308/data_db
    MLFLOW_S3_ENDPOINT_URL: http://10.43.101.195:9000
    AWS_ACCESS_KEY_ID: admin
    AWS_SECRET_ACCESS_KEY: supersecret
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - shared_models:/data/models

  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    mysql_airflow:
      condition: service_healthy

services:

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"      
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          exit 1
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  # ---------------- Minio para MLflow ----------------
  minio:
    container_name: minio
    image: quay.io/minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=supersecret
    restart: unless-stopped

  # ---------------- MySQL para MLflow ----------------
  mysql_mlflow:
    container_name: mysql_mlflow
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: mlflow_db
      MYSQL_USER: admin
      MYSQL_PASSWORD: admingrupo5
      MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
    ports:
      - "3307:3306"
    volumes:
      - ./mysql-mlflow:/var/lib/mysql
    restart: unless-stopped

  # ---------------- MySQL para Datos ----------------
  mysql_data:
    container_name: mysql_data
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: data_db
      MYSQL_USER: admin
      MYSQL_PASSWORD: admingrupo5
      MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
    ports:
      - "3308:3306"
    volumes:
      - ./mysql-data:/var/lib/mysql
    restart: unless-stopped

  # ---------------- MySQL para Airflow ----------------
  mysql_airflow:
    image: mysql:8
    container_name: mysql_airflow
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: airflow
      MYSQL_USER: admin
      MYSQL_PASSWORD: admingrupo5
      MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
    ports:
      - "3306:3306"
    volumes:
      - ./mysql-airflow:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  # ---------------- FastAPI para inferencia ----------------
  fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    container_name: fastapi_app
    ports:
      - "8000:8000"
    environment:
      - MLFLOW_TRACKING_URI=http://10.43.101.195:5000
      - DATABASE_URL=mysql+pymysql://admin:admingrupo5@10.43.101.195:3308/data_db
      - MLFLOW_S3_ENDPOINT_URL=http://10.43.101.195:9000
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=supersecret
    volumes:
      - shared_models:/data/models

volumes:
  mysql-mlflow:
  mysql-data:
  mysql-airflow:
  shared_models:

