version: '3.8'

x-airflow-common: &airflow-common
  # En lugar de "image: apache/airflow:2.7.0", aquí construimos una imagen
  # personalizada (opcional). Si no necesitas instalar paquetes extra,
  # puedes directamente usar la imagen oficial y quitar la línea "build:"
  build: ./airflow
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor

    # Ajuste para usar MySQL como base de datos
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: mysql+mysqlconnector://airflow:airflow@mysql:3306/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: mysql+mysqlconnector://airflow:airflow@mysql:3306/airflow

    # Ajuste para Celery (Redis como broker, MySQL como backend)
    AIRFLOW__CELERY__RESULT_BACKEND: db+mysql://airflow:airflow@mysql:3306/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0

    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__WEBSERVER__SECRET_KEY: 'supersecreto123'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'

  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins

    # Carpeta con tus datos, CSV, etc.
    - ./data:/data

    # Carpeta para los modelos, montada dentro de Airflow como /models
    - ./data/models:/models

  user: "${AIRFLOW_UID:-50000}:0"

  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    mysql:
      condition: service_healthy

services:
  ###################################################################
  # 1) MySQL
  ###################################################################
  mysql:
    image: mysql:latest
    container_name: taller3_prueba_mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: airflow
      MYSQL_USER: airflow
      MYSQL_PASSWORD: airflow
    # Si tienes MySQL local ocupando 3306, usa 3307:3306
    ports:
      - "3307:3306"
    volumes:
      - ./data/mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  ###################################################################
  # 2) Redis
  ###################################################################
  redis:
    image: redis:latest
    container_name: taller3_prueba_redis
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  ###################################################################
  # 3) Airflow Webserver
  ###################################################################
  airflow-webserver:
    <<: *airflow-common
    container_name: taller3_prueba_airflow_webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  ###################################################################
  # 4) Airflow Scheduler
  ###################################################################
  airflow-scheduler:
    <<: *airflow-common
    container_name: taller3_prueba_airflow_scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  ###################################################################
  # 5) Airflow Worker
  ###################################################################
  airflow-worker:
    <<: *airflow-common
    container_name: taller3_prueba_airflow_worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          celery --app airflow.executors.celery_executor.app inspect ping
          -d "celery@$${HOSTNAME}"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  ###################################################################
  # 6) Airflow Triggerer
  ###################################################################
  airflow-triggerer:
    <<: *airflow-common
    container_name: taller3_prueba_airflow_triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  ###################################################################
  # 7) Airflow Init
  ###################################################################
  airflow-init:
    <<: *airflow-common
    container_name: taller3_prueba_airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        echo "Iniciando migraciones de Airflow..."
        exec /entrypoint airflow db upgrade
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: 'airflow'
      _AIRFLOW_WWW_USER_PASSWORD: 'airflow'
    user: "0:0"
    volumes:
      - ./:/sources

  ###################################################################
  # 8) Airflow CLI (opcional - para debug)
  ###################################################################
  airflow-cli:
    <<: *airflow-common
    container_name: taller3_prueba_airflow_cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  ###################################################################
  # 9) FastAPI
  ###################################################################
  fastapi:
    build: ./fastapi
    container_name: taller3_prueba_fastapi
    ports:
      - "8989:8989"
    volumes:
      # Mapeamos la misma carpeta local ./data/models a /app/models en FastAPI
      - ./data/models:/app/models
    depends_on:
      - airflow-webserver
    restart: always

volumes:
  data:
